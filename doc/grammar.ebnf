(* Basic terminals *)
EOL     : '\n' .
CHAR    : 'a' .. 'b' | 'A' .. 'Z' .
DIGIT   : '0' .. '9' .

(* built in value terminals *)
NIL     : 'nil' .
TRUE    : 'true' . 
FALSE   : 'false' .

(* keyword terminals *)
VAR         : 'var' .
CONST       : 'const' .
FUNCTION    : 'function' .

(* operator terminals *)
binary-op  = "||" | "&&" | rel_op | add_op | mul_op .
rel-op     = "==" | "!=" | "<" | "<=" | ">" | ">=" .
add-op     = "+" | "-"  .
mul-op     = "*" | "/" | "%" .
unary-op   = "+" | "-" | "!" .

(* base productions *)
identifier      : CHAR { CHAR | DIGIT } .
boolean-value   : TRUE 
                | FALSE .
integer-value   : DIGIT { DIGIT } .
float-value     : DIGIT '.' DIGIT { DIGIT } .
string-value    : '"' { CHAR | DIGIT } '"' .
value           : NIL 
                | boolean-value 
                | integer-value 
                | float-value 
                | string-value . 

(* statement productions *)
declaration          : identifier { '=' value } EOL .
var-declaration      : VAR ( declaration | '{' EOL { declaration } '}') .
const-declaration    : CONST ( declaration | '{' EOL { declaration } '}') .
function-declaration : FUNCTION '(' [ identifier { ',' identifier } ] ')' '{' EOL function-body '}' .
function-body        : { statement } .
statement            : var-declaration | const-declaration | function-declaration | return-statement .
return-statement     : RETURN [ identifier | value { ',' identifier | value } ] .

(* expression productions *)
expression        : term-expression { add-op term-expression } .
term-expression   : factor-expression { mul-op factor-expression } .
factor-expression : unary-expression { mul-op factor-expression } .
unary-expression  : unary-op unary-expression | value-expression .
value-expression  : identifier | value | paren-expression .
paren-expression  : '(' expression ')' .
